from math import ceil

from cli import StrParameter, mainloop

_S_ORDERS: dict[int, tuple[str, str, str]] = {
    1: ("тысяча", "тысячи", "тысяч"),
    2: ("миллион", "миллиона", "миллионов"),
    3: ("миллиард", "миллиарда", "миллиардов"),
    4: ("триллион", "триллиона", "триллионов"),
    5: ("квадриллион", "квадриллиона", "квадриллионов"),
    6: ("квинтиллион", "квинтиллиона", "квинтиллионов"),
    7: ("секстиллион", "секстиллиона", "секстиллионов"),
    8: ("септиллион", "септиллиона", "септиллионов"),
    9: ("октиллион", "октиллиона", "октиллионов"),
    10: ("нониллион", "нониллиона", "нониллионов"),
    11: ("дециллион", "дециллиона", "дециллионов"),
    12: ("ундециллион", "ундециллиона", "ундециллионов"),
    13: ("дуодециллион", "дуодециллиона", "дуодециллионов"),
    14: ("тредециллион", "тредециллиона", "тредециллионов"),
    15: ("кваттордециллион", "кваттордециллиона", "кваттордециллионов"),
    16: ("квиндециллион", "квиндециллиона", "квиндециллионов"),
    17: ("седециллион", "седециллиона", "седециллионов"),
    18: ("септдециллион", "септдециллиона", "септдециллионов"),
    19: ("октодециллион", "октодециллиона", "октодециллионов"),
    20: ("новемдециллион", "новемдециллиона", "новемдециллионов"),
    21: ("вигинтиллион", "вигинтиллиона", "вигинтиллионов"),
    22: ("унвигинтиллион", "унвигинтиллиона", "унвигинтиллионов"),
    23: ("дуовигинтиллион", "дуовигинтиллиона", "дуовигинтиллионов"),
    24: ("тревигинтиллион", "тревигинтиллиона", "тревигинтиллионов"),
    25: ("кваттуорвигинтиллион", "кваттуорвигинтиллиона", "кваттуорвигинтиллионов"),
    26: ("квинвигинтиллион", "квинвигинтиллиона", "квинвигинтиллионов"),
    27: ("сексвигинтиллион", "сексвигинтиллиона", "сексвигинтиллионов"),
    28: ("септенвигинтиллион", "септенвигинтиллиона", "септенвигинтиллионов"),
    29: ("октовигинтиллион", "октовигинтиллиона", "октовигинтиллионов"),
    30: ("новемвигинтиллион", "новемвигинтиллиона", "новемвигинтиллионов"),
    31: ("тригинтиллион", "тригинтиллиона", "тригинтиллионов"),
    32: ("унтригинтиллион", "унтригинтиллиона", "унтригинтиллионов"),
    33: ("дуотригинтиллион", "дуотригинтиллиона", "дуотригинтиллионов"),
    34: ("третригинтиллион", "третригинтиллиона", "третригинтиллионов"),
    35: ("кваттуортригинтиллион", "кваттуортригинтиллиона", "кваттуортригинтиллионов"),
    36: ("квинтригинтиллион", "квинтригинтиллиона", "квинтригинтиллионов"),
    37: ("секстригинтиллион", "секстригинтиллиона", "секстригинтиллионов"),
    38: ("септентригинтиллион", "септентригинтиллиона", "септентригинтиллионов"),
    39: ("октотригинтиллион", "октотригинтиллиона", "октотригинтиллионов"),
    40: ("новемтригинтиллион", "новемтригинтиллиона", "новемтригинтиллионов"),
    41: ("квадрагинтиллион", "квадрагинтиллиона", "квадрагинтиллионов"),
}

_S_HUNDREDS: dict[int, str] = {
    1: "сто",
    2: "двести",
    3: "триста",
    4: "четыреста",
    5: "пятьсот",
    6: "шестьсот",
    7: "семьсот",
    8: "восемьсот",
    9: "девятьсот",
}

_S_MORE_TEN: dict[int, str] = {
    11: "одиннадцать",
    12: "двенадцать",
    13: "тринадцать",
    14: "четырнадцать",
    15: "пятнадцать",
    16: "шестнадцать",
    17: "семнадцать",
    18: "восемнадцать",
    19: "девятнадцать",
}

_S_DECADES: dict[int, str] = {
    1: "десять",
    2: "двадцать",
    3: "тридцать",
    4: "сорок",
    5: "пятьдесят",
    6: "шестьдесят",
    7: "семьдесят",
    8: "восемьдесят",
    9: "девяносто",
}

_S_UNITS: dict[int, tuple[str, str]] = {
    1: ("один", "одна"),
    2: ("два", "две"),
    3: ("три", "три"),
    4: ("четыре", "четыре"),
    5: ("пять", "пять"),
    6: ("шесть", "шесть"),
    7: ("семь", "семь"),
    8: ("восемь", "восемь"),
    9: ("девять", "девять"),
}


def _abc2str(abc: int, order: int) -> str:
    assert 0 < abc <= 999
    a, bc = abc // 100, abc % 100
    b, c = bc // 10, bc % 10
    s = []
    if a > 0:
        s.append(_S_HUNDREDS[a])
    if 11 <= bc <= 19:
        s.append(_S_MORE_TEN[bc])
        index = 2
    else:
        if b > 0:
            s.append(_S_DECADES[b])
        if c > 0:
            s.append(_S_UNITS[c][1 if order == 1 else 0])
        if c == 1:
            index = 0
        elif 2 <= c <= 4:
            index = 1
        else:
            index = 2
    if order > 0:
        s.append(_S_ORDERS[order][index])
    return " ".join(s)


_MAXLEN = max(_S_ORDERS) * 3 + 3


def _check_input(value: str) -> bool:
    if not value.isdigit():
        print("Ожидаются только цифры.")
        return False
    if len(value) > _MAXLEN:
        print(f"Поддерживаются числа меньше 10^{_MAXLEN}")
        return False
    return True


def main() -> None:
    number = StrParameter("Целое число (только цифры)", _check_input)

    def calc_and_print() -> None:
        s = []
        size = len(number.value)
        order_count = ceil(size / 3)
        end = size - 3 * order_count
        for order in reversed(range(order_count)):
            start, end = end if end > 0 else 0, end + 3
            n = int(number.value[start:end])
            if n > 0:
                s.append(_abc2str(n, order))
        if not s:
            s.append("ноль")
        s[0] = s[0].capitalize()
        print(" ".join(s))

    mainloop(calc_and_print, (number,))


if __name__ == "__main__":
    main()
